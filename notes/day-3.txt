1. service
2. fetching data from RESTful API server (Http Requests)
3. component lifecyle
4. Observable, Observer, RxJS operators, subscription
5. Pipes

6.interaction between two components (one is parent and another is nested)
	@Input(), @Output()


src>app>
		app.module.ts
		common-features
				compoments
						dashboard
								dashboard.component.html+ts+css
						home
								home.component.html+ts+css
		products
			products.module.ts
			components
					add-product
						add-product.components.*
					product-list
							product-list.component.*
					filter-product
							filter-product.component.*
					product-container
							product-container.component.*
			pipes
					product-filter.pipe.ts
			services
					product.service.ts
event interface	method
X	=> 	OnX	=> 		ngOnX
init		OnInit			ngOnInit

get all products
http://127.0.0.1:3003/products
{
	message:string
	data:[{},{},{}] or null
}


get single product
http://127.0.0.1:3003/products/1
{
	message:string,
	data:{} or null
}

post a product
http://127.0.0.1:3003/products
request body: a product object

{
	message:string
	data:[{},{},{}] or null
}

update a product
http://127.0.0.1:3003/products/1
request body: a product object

{
	message:string
	data:[{},{},{}] or null
}

delete a product
http://127.0.0.1:3003/products/1

{
	message:string
	data:[{},{},{}] or null
}

Router => 

Routes (Route[])
Route:

path						component
---------------------------------
home     		=> Home
/						=> Home

products 		=> PL (app-filter-product and app-star)
products/add => AP


